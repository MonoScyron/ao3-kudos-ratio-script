// ==UserScript==
// @name                AO3 Kudos Comment
// @namespace           https://github.com/MonoScyron/ao3-scripts
// @version             0.0.1
// @description         If fic is already kudos-ed, clicking the kudos button automatically writes a nice comment.
// @author              MonoScyron
// @updateURL           https://raw.githubusercontent.com/MonoScyron/ao3-scripts/main/dist/ao3-kudos-comment.js
// @downloadURL         https://raw.githubusercontent.com/MonoScyron/ao3-scripts/main/dist/ao3-kudos-comment.js
// @match               https://archiveofourown.org/works/*
// @match               https://archiveofourown.org/chapters/*
// @icon                https://archiveofourown.org/images/ao3_logos/logo_42.png
// @resource cJSON      https://raw.githubusercontent.com/MonoScyron/ao3-scripts/main/json/comments.json
// @grant               GM_getResourceText
// @noframes
// ==/UserScript==
(()=>{var t={451:t=>{var e=function(){var t=function(t,s,i){this.errors=[],void 0===i.raw&&(this.errors.push("Empty input for node"),i.raw=""),t instanceof e.Grammar?(this.grammar=t,this.parent=null,this.depth=0,this.childIndex=0):(this.grammar=t.grammar,this.parent=t,this.depth=t.depth+1,this.childIndex=s),this.raw=i.raw,this.type=i.type,this.isExpanded=!1,this.grammar||this.errors.push("No grammar specified for this node "+this)};function s(t,e){this.node=t;var s=e.split(":");this.target=s[0],1===s.length?this.type=2:(this.rule=s[1],"POP"===this.rule?this.type=1:this.type=0)}function i(t,e){this.raw=e,this.grammar=t,this.falloff=1,Array.isArray(e)?this.defaultRules=e:("string"==typeof e||e instanceof String)&&(this.defaultRules=[e])}t.prototype.toString=function(){return"Node('"+this.raw+"' "+this.type+" d:"+this.depth+")"},t.prototype.expandChildren=function(s,i){if(this.children=[],this.finishedText="",this.childRule=s,void 0!==this.childRule){var r=e.parse(s);r.errors.length>0&&(this.errors=this.errors.concat(r.errors));for(var n=0;n<r.length;n++)this.children[n]=new t(this,n,r[n]),i||this.children[n].expand(i),this.finishedText+=this.children[n].finishedText}else this.errors.push("No child rule provided, can't expand children")},t.prototype.expand=function(t){if(!this.isExpanded)switch(this.isExpanded=!0,this.expansionErrors=[],this.type){case-1:this.expandChildren(this.raw,t);break;case 0:this.finishedText=this.raw;break;case 1:this.preactions=[],this.postactions=[];var i=e.parseTag(this.raw);this.symbol=i.symbol,this.modifiers=i.modifiers;for(var r=0;r<i.preactions.length;r++)this.preactions[r]=new s(this,i.preactions[r].raw);for(r=0;r<i.postactions.length;r++);for(r=0;r<this.preactions.length;r++)0===this.preactions[r].type&&this.postactions.push(this.preactions[r].createUndo());for(r=0;r<this.preactions.length;r++)this.preactions[r].activate();this.finishedText=this.raw;var n=this.grammar.selectRule(this.symbol,this,this.errors);for(this.expandChildren(n,t),r=0;r<this.modifiers.length;r++){var a=this.modifiers[r],o=[];if(a.indexOf("(")>0){var h=/\(([^)]+)\)/.exec(this.modifiers[r]);!h||h.length<2||(o=h[1].split(","),a=this.modifiers[r].substring(0,a.indexOf("(")))}var l=this.grammar.modifiers[a];l?this.finishedText=l(this.finishedText,o):(this.errors.push("Missing modifier "+a),this.finishedText+="((."+a+"))")}for(r=0;r<this.postactions.length;r++)this.postactions[r].activate();break;case 2:this.action=new s(this,this.raw),this.action.activate(),this.finishedText=""}},t.prototype.clearEscapeChars=function(){this.finishedText=this.finishedText.replace(/\\\\/g,"DOUBLEBACKSLASH").replace(/\\/g,"").replace(/DOUBLEBACKSLASH/g,"\\")},s.prototype.createUndo=function(){return 0===this.type?new s(this.node,this.target+":POP"):null},s.prototype.activate=function(){var e=this.node.grammar;switch(this.type){case 0:this.ruleSections=this.rule.split(","),this.finishedRules=[],this.ruleNodes=[];for(var s=0;s<this.ruleSections.length;s++){var i=new t(e,0,{type:-1,raw:this.ruleSections[s]});i.expand(),this.finishedRules.push(i.finishedText)}e.pushRules(this.target,this.finishedRules,this);break;case 1:e.popRules(this.target);break;case 2:e.flatten(this.target,!0)}},s.prototype.toText=function(){switch(this.type){case 0:return this.target+":"+this.rule;case 1:return this.target+":POP";case 2:return"((some function))";default:return"((Unknown Action))"}},i.prototype.selectRule=function(t){if(this.conditionalRule){var e=this.grammar.expand(this.conditionalRule,!0);if(this.conditionalValues[e]&&null!=(i=this.conditionalValues[e].selectRule(t)))return i}if(this.ranking)for(var s=0;s<this.ranking.length;s++){var i;if(null!=(i=this.ranking.selectRule()))return i}if(void 0!==this.defaultRules){var r=0,n=this.distribution;switch(n||(n=this.grammar.distribution),n){case"shuffle":this.shuffledDeck&&0!==this.shuffledDeck.length||(this.shuffledDeck=function(t,e){for(var s,i,r=t.length;0!==r;)i=Math.floor(Math.random()*r),s=t[r-=1],t[r]=t[i],t[i]=s;return t}(Array.apply(null,{length:this.defaultRules.length}).map(Number.call,Number),this.falloff)),r=this.shuffledDeck.pop();break;case"weighted":t.push("Weighted distribution not yet implemented");break;case"falloff":t.push("Falloff distribution not yet implemented");break;default:r=Math.floor(Math.pow(Math.random(),this.falloff)*this.defaultRules.length)}return this.defaultUses||(this.defaultUses=[]),this.defaultUses[r]=++this.defaultUses[r]||1,this.defaultRules[r]}return t.push("No default rules defined for "+this),null},i.prototype.clearState=function(){this.defaultUses&&(this.defaultUses=[])};var r=function(t,e,s){this.key=e,this.grammar=t,this.rawRules=s,this.baseRules=new i(this.grammar,s),this.clearState()};r.prototype.clearState=function(){this.stack=[this.baseRules],this.uses=[],this.baseRules.clearState()},r.prototype.pushRules=function(t){var e=new i(this.grammar,t);this.stack.push(e)},r.prototype.popRules=function(){this.stack.pop()},r.prototype.selectRule=function(t,e){return this.uses.push({node:t}),0===this.stack.length?(e.push("The rule stack for '"+this.key+"' is empty, too many pops?"),"(("+this.key+"))"):this.stack[this.stack.length-1].selectRule()},r.prototype.getActiveRules=function(){return 0===this.stack.length?null:this.stack[this.stack.length-1].selectRule()},r.prototype.rulesToJSON=function(){return JSON.stringify(this.rawRules)};var n=function(t,e){this.modifiers={},this.loadFromRawObj(t)};function a(t){var e=t.toLowerCase();return"a"===e||"e"===e||"i"===e||"o"===e||"u"===e}n.prototype.clearState=function(){for(var t=Object.keys(this.symbols),e=0;e<t.length;e++)this.symbols[t[e]].clearState()},n.prototype.addModifiers=function(t){for(var e in t)t.hasOwnProperty(e)&&(this.modifiers[e]=t[e])},n.prototype.loadFromRawObj=function(t){if(this.raw=t,this.symbols={},this.subgrammars=[],this.raw)for(var e in this.raw)this.raw.hasOwnProperty(e)&&(this.symbols[e]=new r(this,e,this.raw[e]))},n.prototype.createRoot=function(e){return new t(this,0,{type:-1,raw:e})},n.prototype.expand=function(t,e){var s=this.createRoot(t);return s.expand(),e||s.clearEscapeChars(),s},n.prototype.flatten=function(t,e){return this.expand(t,e).finishedText},n.prototype.toJSON=function(){for(var t=Object.keys(this.symbols),e=[],s=0;s<t.length;s++){var i=t[s];e.push(' "'+i+'" : '+this.symbols[i].rulesToJSON())}return"{\n"+e.join(",\n")+"\n}"},n.prototype.pushRules=function(t,e,s){void 0===this.symbols[t]?(this.symbols[t]=new r(this,t,e),s&&(this.symbols[t].isDynamic=!0)):this.symbols[t].pushRules(e)},n.prototype.popRules=function(t){this.symbols[t]||this.errors.push("Can't pop: no symbol for key "+t),this.symbols[t].popRules()},n.prototype.selectRule=function(t,e,s){if(this.symbols[t])return this.symbols[t].selectRule(e,s);for(var i=0;i<this.subgrammars.length;i++)if(this.subgrammars[i].symbols[t])return this.subgrammars[i].symbols[t].selectRule();return s.push("No symbol for '"+t+"'"),"(("+t+"))"};var o={replace:function(t,e){return t.replace(new RegExp(e[0].replace(/([.*+?^=!:${}()|\[\]\/\\])/g,"\\$1"),"g"),e[1])},capitalizeAll:function(t){for(var e,s="",i=!0,r=0;r<t.length;r++)(e=t.charAt(r))>="a"&&e<="z"||e>="A"&&e<="Z"||e>="0"&&e<="9"?i?(s+=t.charAt(r).toUpperCase(),i=!1):s+=t.charAt(r):(i=!0,s+=t.charAt(r));return s},capitalize:function(t){return t.charAt(0).toUpperCase()+t.substring(1)},a:function(t){if(t.length>0){if("u"===t.charAt(0).toLowerCase()&&t.length>2&&"i"===t.charAt(2).toLowerCase())return"a "+t;if(a(t.charAt(0)))return"an "+t}return"a "+t},firstS:function(t){console.log(t);var e=t.split(" "),s=o.s(e[0])+" "+e.slice(1).join(" ");return console.log(s),s},s:function(t){switch(t.charAt(t.length-1)){case"s":case"h":case"x":return t+"es";case"y":return a(t.charAt(t.length-2))?t+"s":t.substring(0,t.length-1)+"ies";default:return t+"s"}},ed:function(t){switch(t.charAt(t.length-1)){case"s":case"h":case"x":default:return t+"ed";case"e":return t+"d";case"y":return a(t.charAt(t.length-2))?t+"d":t.substring(0,t.length-1)+"ied"}}};return(e={createGrammar:function(t){return new n(t)},parseTag:function(t){for(var s={symbol:void 0,preactions:[],postactions:[],modifiers:[]},i=e.parse(t),r=void 0,n=0;n<i.length;n++)if(0===i[n].type){if(void 0!==r)throw"multiple main sections in "+t;r=i[n].raw}else s.preactions.push(i[n]);if(void 0===r);else{var a=r.split(".");s.symbol=a[0],s.modifiers=a.slice(1)}return s},parse:function(t){var e=0,s=!1,i=[],r=!1,n=[],a=0,o="",h=void 0;if(null===t)return(i=[]).errors=n,i;function l(e,s,r){var a;s-e<1&&(1===r&&n.push(e+": empty tag"),2===r&&n.push(e+": empty action")),a=void 0!==h?o+"\\"+t.substring(h+1,s):t.substring(e,s),i.push({type:r,raw:a}),h=void 0,o=""}for(var u=0;u<t.length;u++)if(r)r=!1;else switch(t.charAt(u)){case"[":0!==e||s||(a<u&&l(a,u,0),a=u+1),e++;break;case"]":0!=--e||s||(l(a,u,2),a=u+1);break;case"#":0===e&&(s?(l(a,u,1),a=u+1):(a<u&&l(a,u,0),a=u+1),s=!s);break;case"\\":r=!0,o+=t.substring(a,u),a=u+1,h=u}return a<t.length&&l(a,t.length,0),s&&n.push("Unclosed tag"),e>0&&n.push("Too many ["),e<0&&n.push("Too many ]"),(i=i.filter((function(t){return 0!==t.type||0!==t.raw.length}))).errors=n,i}}).baseEngModifiers=o,e.TraceryNode=t,e.Grammar=n,e.Symbol=r,e.RuleSet=i,e}();t.exports=e}},e={};function s(i){var r=e[i];if(void 0!==r)return r.exports;var n=e[i]={exports:{}};return t[i](n,n.exports,s),n.exports}(()=>{"use strict";!function(){let t=s(451),e=t.createGrammar(JSON.parse(GM_getResourceText("cJSON")));e.addModifiers(t.baseEngModifiers);const i=document.querySelector("textarea[id*='comment_content_for']");let r=document.getElementById("kudos_message");null==r||r.addEventListener("DOMAttrModified",(()=>{r.classList.contains("kudos_error")&&(i.value=e.flatten("#re_read#").replace("  "," "))}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,